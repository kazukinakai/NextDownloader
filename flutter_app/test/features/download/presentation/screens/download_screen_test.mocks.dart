// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_app/test/features/download/presentation/screens/download_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_app/features/download/domain/entities/download_info.dart'
    as _i2;
import 'package:flutter_app/features/download/domain/repositories/download_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDownloadInfo_0 extends _i1.SmartFake implements _i2.DownloadInfo {
  _FakeDownloadInfo_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDownloadProgress_1 extends _i1.SmartFake
    implements _i2.DownloadProgress {
  _FakeDownloadProgress_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeYoutubeVideoInfo_2 extends _i1.SmartFake
    implements _i2.YoutubeVideoInfo {
  _FakeYoutubeVideoInfo_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DownloadRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDownloadRepository extends _i1.Mock
    implements _i3.DownloadRepository {
  MockDownloadRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DownloadInfo> startDownload(
    String? url,
    String? destination,
    _i2.DownloadOptions? options,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#startDownload, [url, destination, options]),
            returnValue: _i4.Future<_i2.DownloadInfo>.value(
              _FakeDownloadInfo_0(
                this,
                Invocation.method(#startDownload, [url, destination, options]),
              ),
            ),
          )
          as _i4.Future<_i2.DownloadInfo>);

  @override
  _i4.Future<_i2.DownloadInfo> startAuthenticatedDownload(
    String? url,
    String? destination,
    String? cookiesPath,
    _i2.DownloadOptions? options,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#startAuthenticatedDownload, [
              url,
              destination,
              cookiesPath,
              options,
            ]),
            returnValue: _i4.Future<_i2.DownloadInfo>.value(
              _FakeDownloadInfo_0(
                this,
                Invocation.method(#startAuthenticatedDownload, [
                  url,
                  destination,
                  cookiesPath,
                  options,
                ]),
              ),
            ),
          )
          as _i4.Future<_i2.DownloadInfo>);

  @override
  _i4.Future<_i2.DownloadProgress> getDownloadProgress(String? downloadId) =>
      (super.noSuchMethod(
            Invocation.method(#getDownloadProgress, [downloadId]),
            returnValue: _i4.Future<_i2.DownloadProgress>.value(
              _FakeDownloadProgress_1(
                this,
                Invocation.method(#getDownloadProgress, [downloadId]),
              ),
            ),
          )
          as _i4.Future<_i2.DownloadProgress>);

  @override
  _i4.Future<bool> pauseDownload(String? downloadId) =>
      (super.noSuchMethod(
            Invocation.method(#pauseDownload, [downloadId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> resumeDownload(String? downloadId) =>
      (super.noSuchMethod(
            Invocation.method(#resumeDownload, [downloadId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> cancelDownload(String? downloadId) =>
      (super.noSuchMethod(
            Invocation.method(#cancelDownload, [downloadId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<List<_i2.DownloadInfo>> getDownloadList() =>
      (super.noSuchMethod(
            Invocation.method(#getDownloadList, []),
            returnValue: _i4.Future<List<_i2.DownloadInfo>>.value(
              <_i2.DownloadInfo>[],
            ),
          )
          as _i4.Future<List<_i2.DownloadInfo>>);

  @override
  _i4.Future<String> detectContentType(String? url) =>
      (super.noSuchMethod(
            Invocation.method(#detectContentType, [url]),
            returnValue: _i4.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#detectContentType, [url]),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<_i2.YoutubeVideoInfo> getYoutubeVideoInfo(String? url) =>
      (super.noSuchMethod(
            Invocation.method(#getYoutubeVideoInfo, [url]),
            returnValue: _i4.Future<_i2.YoutubeVideoInfo>.value(
              _FakeYoutubeVideoInfo_2(
                this,
                Invocation.method(#getYoutubeVideoInfo, [url]),
              ),
            ),
          )
          as _i4.Future<_i2.YoutubeVideoInfo>);
}
