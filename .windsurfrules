# AIエキスパートコーディングアシスタントの基本原則

## 🔄 プロジェクト理解と準備
- 新しい会話を始める際は、必ず `docs/PLANNING.md` を読み、プロジェクトの全体像を理解してください。ファイルが存在しない場合は直ちに作成してください。
- タスク開始前に必ず `docs/TASK.md` をチェックし、新しいタスクには説明と日付を追加してください。ファイルが存在しない場合は直ちに作成してください。
- プロジェクト固有の知識や学んだことは `docs/KNOWLEDGE.md` に記録し、継続的に更新・参照してください。ファイルが存在しない場合は直ちに作成してください。

## 📄 ドキュメント作成ガイドライン
- **PLANNING.md** には以下を必ず含めてください：
  - プロジェクト概要と目的
  - アーキテクチャと技術スタック（言語・フレームワーク・バージョン）
  - ディレクトリ構造の概要
  - コーディング規約とスタイルガイド
  - テスト方針
  - デプロイメントフロー
  - ロードマップとマイルストーン

- **TASK.md** には以下のセクションを必ず含めてください：
  - 現在の主タスク（チェックリスト形式）
  - 優先度の高いタスク
  - 作業中に発見されたタスク
  - 完了したタスク（完了日付を含む）
  - 将来の課題
  - 進行中のタスクの詳細

- **KNOWLEDGE.md** には以下のカテゴリを必ず含めてください：
  - 技術スタックの最新情報
  - 発見したベストプラクティス
  - トラブルシューティングと解決策
  - 重要な設計判断とその理由
  - 学習リソースと参考資料

## 📚 知識の蓄積と共有
- context7 や brave search で調べた最新情報、ベストプラクティス、重要な発見は必ず `docs/KNOWLEDGE.md` に追加してください。
- 一度調べた情報を再利用することで、効率的な開発を実現してください。

## 🔎 最新情報の確認
- 知っている情報でも常に更新されているため、必ず context7、brave search 等のツールで最新情報とベストプラクティスを確認してください。
- 言語、ライブラリ、フレームワークは常に最新版を採用し、致命的なバグ等の特定の理由がある場合にのみ LTS 版を検討してください。
- 依存関係は小まめに更新し、最新の変更に常に追従するよう心がけてください。

## 🔍 プロジェクト分析
- file system、grep、find、tree などのコマンドで既存コードを徹底分析してください。
- 使用言語、フレームワーク、ライブラリ、ディレクトリ構造、設計パターンを正確に把握してください。

## 📋 計画と実装
- タスク開始前に必ず sequential-thinking ツールで計画を立ててください。
- わからないことがあれば、自己解決せずに必ず context7 や brave search で調べてください。
- エラーが発生した場合は、そのエラーメッセージを context7 で検索して最新の解決策を見つけてください。

## 📁 ファイル管理
- 既存コードの重複実装は避け、実装前に類似機能の有無を確認してください。
- cp ではなく mv コマンドを使用して、ファイルの重複を防いでください。
- .gitignore に記載されていないファイルは安全に変更できます。

## 🧰 コード品質
- 1ファイルは 500 行を目安にモジュール化し、単一責任の原則を守ってください。
- 命名は具体的で責務がわかる名前を使い、抽象的な名前は避けてください。
- テスト可能な設計を常に意識してください。

## 💬 コミュニケーション
- 複雑な実装では、計画、コード、説明を明確に分けて提示してください。
- 実装の選択肢がある場合は、長所・短所と推奨案を提示してください。

## 🔄 プロジェクトの整合性維持
- 複数のドキュメント間で矛盾を発見した場合は、最新情報に基づいて更新し、ユーザーに変更を報告してください。
- PLANNING.mdの情報が古いと思われる場合は、最新のベストプラクティスに基づいて更新してください。
- プロジェクトのゴールが不明確な場合は、具体的な質問を通じてユーザーから情報を引き出してください。
- 新しいプロジェクトの場合は、初回の会話でPLANNING.mdを作成し、必要な情報をユーザーから引き出してください。